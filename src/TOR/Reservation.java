/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TOR;

import java.awt.Color;
import java.text.ParseException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author ΠΑΝΟΣ
 */
public class Reservation extends javax.swing.JFrame {

    /**
     * Creates new form Reservation
     */
    public Reservation() {
        initComponents();
        getContentPane().setBackground(Color.cyan);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        Seats = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        FirstName = new javax.swing.JTextField();
        LastName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setText("REQUIRED INFORMATION");

        Seats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeatsActionPerformed(evt);
            }
        });

        jButton2.setText("Auto Generate Seats");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Manual Seats Input");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel9.setText("First Name:");

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel10.setText("Last Name:");

        FirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel11.setText("Seats:");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TOR/SeatsRe.jpg"))); // NOI18N
        jLabel4.setText("Enter Ιnformation:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Seats, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Seats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jLabel4)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeatsActionPerformed

    }//GEN-LAST:event_SeatsActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Seats.disable();
        Seats.setText("");
         setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        try {
            AutomaticSeatSelect();
        } catch (ParseException ex) {
            Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Seats.enable();
        Seats.setText(Seats.getText());

    }//GEN-LAST:event_jButton3ActionPerformed

    private void FirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FirstNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reservation().setVisible(true);
            }
        });
    }
public void AutomaticSeatSelect() throws ParseException
{
Random randomGenerator = new Random();
        int randomIntforSeat = randomGenerator.nextInt(6);
        int randomIntforNum = randomGenerator.nextInt(14-1)+1;
        
         UserGUI tic = new UserGUI();
        int tickets = tic.getNumOfTicket();
      
        int ticketsInt = tickets;
        
        String[] seat ={"A", "B", "C", "D", "E", "F"};
            String chooseSeat;    
            String chosenSeat;
            String[] chosenSeats = new String[ticketsInt];
             
         switch (randomIntforSeat)
    {
             case 0:
                 
                int randomIntforNumA = randomGenerator.nextInt(11-1)+1;
                     
                          
                  if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat +  randomIntforNumA;                     
                    chosenSeats[i] = chosenSeat;
                    
                     randomIntforNumA++;
                    }
           
             String seperatedSeats = String.join(" ", chosenSeats); 
             
                      Seats.setText(Seats.getText() + seperatedSeats); 
                      
                         

                
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNumA;
                Seats.setText(Seats.getText() + chosenSeat); 
                }
                
                
                 break;
         
             case 1:
               
                if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                        if (randomIntforNum==13)
                    {
                    randomIntforNum=1;
                    }
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat + randomIntforNum;                     
                    chosenSeats[i] = chosenSeat;
                    
                    randomIntforNum++;
                    }
                    String seperatedSeats = String.join(" ", chosenSeats); 
                      Seats.setText(Seats.getText() + seperatedSeats); 
                  
                 
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNum;
                 Seats.setText(Seats.getText() + chosenSeat); 

               
                }
                
                
                 break;
                 
             case 2:
                 if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                           if (randomIntforNum==13)
                    {
                    randomIntforNum=1;
                    }
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat + randomIntforNum;                     
                    chosenSeats[i] = chosenSeat;
                    
                    randomIntforNum++;
                    }
                   String seperatedSeats = String.join(" ", chosenSeats); 
                     Seats.setText(Seats.getText() + seperatedSeats); 
                 
                    
                
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNum;
                 Seats.setText(Seats.getText() + chosenSeat);
               
                }
                
                
                 break;
             case 3:
                   if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                           if (randomIntforNum==13)
                    {
                  randomIntforNum=1;
                    }
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat + randomIntforNum;                     
                    chosenSeats[i] = chosenSeat;
                    
                    randomIntforNum++;
                    }
                    String seperatedSeats = String.join(" ", chosenSeats); 
                     Seats.setText(Seats.getText() + seperatedSeats); 
       
                
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNum;
                 Seats.setText(Seats.getText() + chosenSeat);
               
                }
                
                
                 break;
                 
              case 4:
                    if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                           if (randomIntforNum==13)
                    {
                        randomIntforNum=1;
                    }
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat + randomIntforNum;                     
                    chosenSeats[i] = chosenSeat;
                    
                    randomIntforNum++;
                    }
                    
                     String seperatedSeats = String.join(" ", chosenSeats); 
                      Seats.setText(Seats.getText() + seperatedSeats); 
                    
             
                
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNum;
                 Seats.setText(Seats.getText() + chosenSeat);
                
                }
                
                
                 break;
                 
              case 5:
                  if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                           if (randomIntforNum==13)
                    {
                      randomIntforNum=1;
                    }
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat + randomIntforNum;                     
                    chosenSeats[i] = chosenSeat;
                    
                    randomIntforNum++;
                    }
                    
                    String seperatedSeats = String.join(" ", chosenSeats); 
                      Seats.setText(Seats.getText() + seperatedSeats); 
                     
             
                
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNum;
                  Seats.setText(Seats.getText() + chosenSeat);
                
                }
                
                
                 break;
                 case 6:
                  if (ticketsInt>1)
                {
                    for( int i=0; i <ticketsInt; i++)
                    {
                           if (randomIntforNum==13)
                    {
                      randomIntforNum=1;
                    }
                    chooseSeat = seat[randomIntforSeat];
                    chosenSeat = chooseSeat + randomIntforNum;                     
                    chosenSeats[i] = chosenSeat;
                    
                    randomIntforNum++;
                    }
                    
                    String seperatedSeats = String.join(" ", chosenSeats); 
                      Seats.setText(Seats.getText() + seperatedSeats); 
                     
             
                
                }
                else
                {
                 chooseSeat = seat[randomIntforSeat];
                 chosenSeat = chooseSeat + randomIntforNum;
                  Seats.setText(Seats.getText() + chosenSeat);
                
                }
                
                
                 break;
         }

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FirstName;
    private javax.swing.JTextField LastName;
    private javax.swing.JTextField Seats;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
