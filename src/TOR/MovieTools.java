/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TOR;

import java.awt.Color;
import java.sql.Array;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ΠΑΝΟΣ
 */
public class MovieTools extends javax.swing.JFrame {

    /**
     * Creates new form MovieTools
     */
    public MovieTools() {
        initComponents();
        updateMovieStatistics();
        getContentPane().setBackground(Color.LIGHT_GRAY);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MovieNames = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movie Tools");

        MovieNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieNamesActionPerformed(evt);
            }
        });

        jButton1.setText("View Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Movie");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Change Ticket Cost");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel1.setText("Select Movie:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MovieNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MovieNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

         

         
          if(MovieNames.getItemCount() != 0)
         {
          String notAvailable = null;
          String SelectedMovie= MovieNames.getSelectedItem().toString();
          
          String start = null ; 
             String end  = null;
             String minutes = null ;
             String room  = null;
             String cost = null;
          
          
        try {
             Connection con;
             SqlCon movie_ret = new SqlCon();
             con = movie_ret.getConnection();
                   
            PreparedStatement stmt = con.prepareStatement("Select Tickets,TicketCost,Movie from usergui Where Movie='" + SelectedMovie + "'"); 
            PreparedStatement stmt1 = con.prepareStatement("Select * from adminmovieconfig Where MovieName='" + SelectedMovie + "'"); 
            ResultSet rs; 
              ResultSet rs1; 
            rs=stmt.executeQuery();
            rs1=stmt1.executeQuery();
          
            
            ArrayList list = new ArrayList();
             ArrayList list1 = new ArrayList();
             
            while(rs.next() && rs1.next())
            { 
                
                notAvailable = rs.getString("Movie");
               list.add(rs.getString("Tickets"));
              list1.add(rs.getString("TicketCost"));
              cost = rs1.getString("TicketCost");
             start =rs1.getString("StartTime"); 
             end =rs1.getString("EndTime");
              minutes = rs1.getString("MovieMinutes");
              room = rs1.getString("Room");
              
             
                       }
            
             if (notAvailable!= null)
             
             {
              
               String [] itemnameArray = new String [list.size()];
            list.toArray(itemnameArray);
             StringBuilder stringBuilder = new StringBuilder();
             
              for (int i = 0; i < itemnameArray.length; i++)
              {
            stringBuilder.append(itemnameArray[i] + " ");          
                }
              
                String[] numbers = stringBuilder.toString().split(" ");
                for (String number : numbers)
                    {
                        list.add(Integer.valueOf(number));
                    }
                int[] array = Arrays.asList(numbers).stream().mapToInt(Integer::parseInt).toArray();
                    
                int sum = 0;
                for (int x:array)
                {
                sum+=x;
                }
                
                String [] ticketCostArray = new String [list1.size()];
                list1.toArray(ticketCostArray);
             StringBuilder ticketCostBuilder = new StringBuilder();
             
              for (int i = 0; i < ticketCostArray.length; i++)
              {
            ticketCostBuilder.append(ticketCostArray[i] + " ");          
                }
              
                String[] ticketCostNumbers = ticketCostBuilder.toString().split(" ");
                for (String number : ticketCostNumbers)
                    {
                        list1.add(Integer.valueOf(number));
                    }
                int[] ticketCostArray2 = Arrays.asList(ticketCostNumbers).stream().mapToInt(Integer::parseInt).toArray();
                    
                int sum1 = 0;
                for (int x:ticketCostArray2)
                {
                sum1+=x;
                }
               
                int profita = 0;
                    for (int i=0; i <ticketCostArray2.length; i++ )
                    
                    
                    {
                     profita = profita + ( array[i] * ticketCostArray2[i] );
                      System.out.println(profita);
                    
                    }

              
            JOptionPane.showMessageDialog(rootPane, "Movie: " + SelectedMovie + "\n"+ "Total Tickets Reserved: "+
                    " " + sum + "\n" + "Total Profit:" +" "+  profita+"€"+
                            "\n\n"+"Further Details: "+"\n" +"Movie starts at "+ start+", ends at "+end+ " and the ticket cost is "+cost+"€");
        }
             else
        
        {
            JOptionPane.showMessageDialog(rootPane,"Statistics for the movie " +SelectedMovie+", are not avaliable.");
                
                }
        
        }
         
        catch (SQLException ex)
        {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
                
        }
         
        
        
        
         }
         else
         {
         JOptionPane.showMessageDialog(rootPane,"Movie list is not available.");
         }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MovieNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieNamesActionPerformed

        
    }//GEN-LAST:event_MovieNamesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
         
         
         
         if(MovieNames.getItemCount() != 0)
         {
             
         int input = JOptionPane.showConfirmDialog(null, "Sure?");     
         
        if (input==0)
            {
        DeleteMovie();
        
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Please Choose a movie.");
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       
        
        
        
        if(MovieNames.getItemCount() != 0)
       {
        String popUp = JOptionPane.showInputDialog("Enter new ticket cost");
       if (popUp!=null)
       {
       
       
       String  SelectedMovie= MovieNames.getSelectedItem().toString();
       Connection con;
        SqlCon movie_ret = new SqlCon();
        con = movie_ret.getConnection();
                 Statement s;
        try {
            s = con.createStatement();
            int updateCount = s.executeUpdate("UPDATE adminmovieconfig SET TicketCost='" +popUp+"' WHERE MovieName ='"+SelectedMovie+"'");
             JOptionPane.showMessageDialog(rootPane, "Ticket cost for the movie:" +" " + SelectedMovie + ", changed to " + popUp+"€");
        } catch (SQLException ex) {
            Logger.getLogger(MovieTools.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
       }
        else
       {
       
       JOptionPane.showMessageDialog(rootPane, "Please choose a movie.");
       
       }
       
      
        
  
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieTools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieTools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieTools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieTools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieTools().setVisible(true);
               
            }
        });
    }

    
    
    
    public void updateMovieStatistics() 
    {
    
     Connection con;
        SqlCon movie_ret = new SqlCon();
        con = movie_ret.getConnection();
        
      
        if (con!=null)
        {
         try {
            Statement s = con.createStatement();
               
            ResultSet rs = s.executeQuery("Select MovieName from adminmovieconfig");
            while(rs.next())
                {
                    MovieNames.addItem(rs.getString("MovieName"));
                            }
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else
        {
        JOptionPane.showMessageDialog(rootPane, "Unable to connect to database.");
        }
    
    
    }
  
    public void DeleteMovie()
    {
        
        
         
          Connection con;
        SqlCon movie_ret = new SqlCon();
        con = movie_ret.getConnection();
       
         String SelectedMovie= MovieNames.getSelectedItem().toString();
        try {
            PreparedStatement stmt = con.prepareStatement("DELETE FROM adminmovieconfig WHERE MovieName='" + SelectedMovie + "'");
            PreparedStatement stmt1 = con.prepareStatement("DELETE FROM usergui WHERE Movie='" + SelectedMovie + "'"); 
            stmt.executeUpdate();
            stmt1.executeUpdate();
            MovieNames.removeItem(SelectedMovie);
           JOptionPane.showMessageDialog(rootPane, "Movie " + SelectedMovie + " has been deleted.");
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(UserGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         
   
         
    
    
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> MovieNames;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
