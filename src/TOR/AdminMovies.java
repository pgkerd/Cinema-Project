/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TOR;

import java.awt.Checkbox;
import java.awt.CheckboxGroup;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ΠΑΝΟΣ
 */
public class AdminMovies extends javax.swing.JFrame {

    
   
    public static int no = 0;
    
    
    
    
    
    public AdminMovies() {
        initComponents();
        TicketCostField1.disable();
        MovieMinutesField1.disable();
        MovieReps1.disable();
        RestTimeField.disable();
        StartTimeField.disable();
        EndTimeField.disable();
        getContentPane().setBackground(Color.cyan);
        jMenuBar1.setBackground(Color.yellow);
        
       
        A1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jCheckBox5.setEnabled(false);
   
CheckboxGroup cbg = new CheckboxGroup();
add(new Checkbox("one", cbg, true));
add(new Checkbox("two", cbg, false));
add(new Checkbox("three", cbg, false)); 
       
    }
    
    public void TicketCostToMovieTools()
 
 {
  
 }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        MovieName = new java.awt.TextField();
        A1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        TicketCostField1 = new javax.swing.JFormattedTextField();
        MovieMinutesField1 = new javax.swing.JFormattedTextField();
        MovieReps1 = new javax.swing.JFormattedTextField();
        RestTimeField = new javax.swing.JFormattedTextField();
        StartTimeField = new javax.swing.JFormattedTextField();
        EndTimeField = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Online Movie Reservation tool ~ADMIN~");
        setResizable(false);

        MovieName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        MovieName.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        MovieName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieNameActionPerformed(evt);
            }
        });

        buttonGroup1.add(A1);
        A1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        A1.setText("A1");
        A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jCheckBox2.setText("A2");

        buttonGroup1.add(jCheckBox3);
        jCheckBox3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jCheckBox3.setText("A4");

        buttonGroup1.add(jCheckBox4);
        jCheckBox4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jCheckBox4.setText("A5");

        buttonGroup1.add(jCheckBox5);
        jCheckBox5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jCheckBox5.setText("A3");

        jButton1.setText("Insert Movie");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Malgun Gothic Semilight", 1, 14)); // NOI18N
        jLabel1.setText("Insert Movie's Name:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("Movie Duration(min)");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel7.setText("Start time");

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel10.setText("Ticket Cost(€)");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setText("End time");

        jLabel16.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel16.setText("Rooms to be applied");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Movie repetitions");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel3.setText("Rest Time(min)");

        jButton2.setText("Set Details");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TOR/line.png"))); // NOI18N

        try {
            TicketCostField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TicketCostField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TicketCostField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TicketCostField1ActionPerformed(evt);
            }
        });
        TicketCostField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TicketCostField1KeyPressed(evt);
            }
        });

        MovieMinutesField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        MovieMinutesField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MovieMinutesField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieMinutesField1ActionPerformed(evt);
            }
        });

        try {
            MovieReps1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        MovieReps1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        RestTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        try {
            StartTimeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        StartTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        try {
            EndTimeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        EndTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jMenu1.setText("Movie Tools");

        jMenuItem1.setText("Movie Statistics");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Find User");

        jMenuItem3.setText("Find user's reservation");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16)
                    .addComponent(MovieName, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(A1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox4))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(42, 42, 42)
                .addComponent(jLabel6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel2))
                            .addComponent(jLabel7)
                            .addComponent(TicketCostField1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MovieReps1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StartTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel13)
                            .addComponent(jLabel3)
                            .addComponent(MovieMinutesField1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RestTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EndTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MovieName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox3)))
            .addComponent(jLabel6)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MovieMinutesField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RestTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StartTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EndTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(4, 4, 4)
                        .addComponent(TicketCostField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MovieReps1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Connection con;
        SqlCon movie_one_insert = new SqlCon();
        con = movie_one_insert.getConnection();
        
        if ( MovieName.getText().trim().isEmpty() || TicketCostField1.getText().trim().isEmpty() || MovieMinutesField1.getText().trim().isEmpty() || StartTimeField.getText().trim().isEmpty() || EndTimeField.getText().trim().isEmpty() ||buttonGroup1.getSelection()==null )
        
        {
        
         JOptionPane.showMessageDialog(rootPane, "Error!"+ "\n"+ "Some fields are empty.");  
        } 
        else{ 
         
        String querys = "insert into adminmovieconfig "
                + "(MovieName, TicketCost, MovieMinutes, StartTime, EndTime,Room,Repetitions,RestBetweenReps)" 
                + "values(?,?,?,?,?,?,?,?)";
        
        int min =Integer.parseInt(MovieMinutesField1.getText());
        String start = StartTimeField.getText();
                        String startWithoutSecs[] = start.split(":"); 
                        String startH = startWithoutSecs[0]; 
                        String startM = startWithoutSecs[1]; 
          String end = EndTimeField.getText();
                        String endWithoutSecs[] = end.split(":"); 
                        String endH = endWithoutSecs[0]; 
                        String endM = endWithoutSecs[1];               
                        
                        
              int startHourInt = Integer.parseInt(startH);  
              int startMinInt = Integer.parseInt(startM);
               int endHourInt = Integer.parseInt(endH);  
              int endMinInt = Integer.parseInt(endM);
              
              
             
                
                
              
                 LocalTime startTime = LocalTime.parse(StartTimeField.getText(),DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime endTime = LocalTime.parse(EndTimeField.getText(),DateTimeFormatter.ofPattern("HH:mm"));                        
                LocalTime timeBound = LocalTime.parse("02:00", DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime movieDup;
                LocalTime movieDupEnd;
              
 
         if ( MovieName.getText().trim().isEmpty() || TicketCostField1.getText().trim().isEmpty() || MovieMinutesField1.getText().trim().isEmpty() || StartTimeField.getText().trim().isEmpty() || EndTimeField.getText().trim().isEmpty()   )
        
        {
        
         JOptionPane.showMessageDialog(rootPane, "Put correct values");  
        }
         else if  (min>120 || min <90)
                 {
                
              
                             JOptionPane.showMessageDialog(rootPane, "Put correct Movie Duaration (90min - 120mins)");  

                    
                    
                }
         else if (startHourInt < 18)
         {
             
               
              JOptionPane.showMessageDialog(rootPane, "Movie must start at 18:00 or after"); 
             
         }
       
      else if (  ( startTime.isAfter(endTime) && ( !timeBound.isBefore(startTime) || !timeBound.isAfter(endTime)) ) && (endHourInt > 2 || endMinInt >=1))
             
              {
                  
                  JOptionPane.showMessageDialog(rootPane, "Movie must end at 02:00 or before");   
               }
    
        else 
          
          try {
          if(MovieErrorTime())
          {
              JOptionPane.showMessageDialog(rootPane, "Check values");
          }
                 
          
          else{
              
                  String roomOne = "";
                  String roomTwo ="";
                  String roomThree ="";
                  String roomfour ="";
                  String roomFive ="";
              if (A1.isSelected()) {
                      roomOne += A1.getText() + " ";
                  }
                  if (jCheckBox2.isSelected()) {
                      roomTwo += jCheckBox2.getText() + " ";
                  }
                  if (jCheckBox3.isSelected()) {
                      roomThree += jCheckBox3.getText() + " ";
                  }
                  
                  if (jCheckBox4.isSelected()) {
                      roomfour += jCheckBox4.getText() + " ";
                  }
                  
                  if (jCheckBox5.isSelected()) {
                      roomFive += jCheckBox5.getText() + " ";
                  }
              
              String checked = roomOne + roomTwo + roomThree + roomfour + roomFive;
             
        SqlCon movie_ret = new SqlCon();
        con = movie_ret.getConnection();
              if (con!=null)
        {
            String    movieDuplicate = MovieName.getText();
                    String roomDuplicate=null;
                    String startTimeDuplicate = null;
                    String endTimeDuplicate = null;
                    String CurrentRoom = null;
                     String movie = null;
                     ArrayList movieList = new ArrayList();
               try {
   
                   Statement s = con.createStatement();          
                   ResultSet rs = s.executeQuery("Select * from adminmovieconfig where Room ='" + checked+"'");
            
        
               
               while (rs.next())
               {
               
                 movieList.add(rs.getString("MovieName"));
                 roomDuplicate = rs.getString("Room");
                 startTimeDuplicate= rs.getString("StartTime");
                 endTimeDuplicate= rs.getString("EndTime");
               }
              
              if (roomDuplicate!= null)
              {
                  
                        String startSqlParse = startTimeDuplicate;
                        String startSqlParseWs[] = startSqlParse.split(":"); 
                        String startSqlParseH = startSqlParseWs[0]; 
                        String startSqlM = startSqlParseWs[1]; 
                        int startSqlParseHInt = Integer.parseInt(startSqlParseH);  
                        int startSqlParseM = Integer.parseInt(startSqlM);
                         
                        String endSqlParse = endTimeDuplicate;
                        String endSqlParseWs[] = endSqlParse.split(":"); 
                        String endSqlParseH = endSqlParseWs[0]; 
                        String endSqlM = endSqlParseWs[1]; 
                        int endSqlParseHInt = Integer.parseInt(endSqlParseH);  
                        int endSqlParseM = Integer.parseInt(endSqlM); 

                        SimpleDateFormat sequence = new SimpleDateFormat("HH:mm"); 
                        Calendar endA = Calendar.getInstance();
                        Calendar startA =Calendar.getInstance();
                        Calendar startSQL = Calendar.getInstance();
                        Calendar  endSQL = Calendar.getInstance();
                        Calendar midnight = Calendar.getInstance();
                        
                        startA.set(Calendar.HOUR_OF_DAY, Integer.parseInt(startH));
                        startA.set(Calendar.MINUTE,  Integer.parseInt(startM));  
                        startA.set(Calendar.DATE, 1);
                        endA.set(Calendar.HOUR_OF_DAY, Integer.parseInt(endH));
                        endA.set(Calendar.MINUTE,  Integer.parseInt(endM)); 
                        endA.set(Calendar.DATE, 1);
                        
                        startSQL.set(Calendar.HOUR_OF_DAY,startSqlParseHInt);
                        startSQL.set(Calendar.MINUTE,startSqlParseM);
                        startSQL.set(Calendar.DATE, 1);
                        
                        endSQL.set(Calendar.HOUR_OF_DAY,endSqlParseHInt);
                        endSQL.set(Calendar.MINUTE,endSqlParseM);
                        endSQL.set(Calendar.DATE, 1);
                        
                        midnight.set(Calendar.HOUR_OF_DAY, 00);
                        midnight.set(Calendar.MINUTE, 00);
                         
                       
                       
                        boolean time ; 
                        boolean one = ( startA.after(startSQL) && startA.before(endSQL) );
                        
                        boolean two = (  startA.equals(startSQL) ||  startA.equals(endSQL)  ) ;
                      
                        boolean Three = ( endA.after(startSQL) &&  endA.before(endSQL) );
                       
                        boolean tel = one || two || Three;
                        
                        
                        
                         
                         
                        
                        
                      
              
              
              
              
              
               if (  startTimeDuplicate!=null || endTimeDuplicate!=null )
               {        
                        
            
                        
                   if (A1.isSelected() && tel ) {
    
                      if(roomDuplicate.compareTo(A1.getText()) ==1)
                      { 
                       checked= "";
                      JOptionPane.showMessageDialog(rootPane, "At "+roomOne+"," +movie+ " is playing between "+startTimeDuplicate+ "and " + endTimeDuplicate+".");
                      }
                   
                  }
                   else if (jCheckBox2.isSelected()&& tel) {
                    
                      if(roomDuplicate.equals(roomTwo))
                      {checked= "";
                      JOptionPane.showMessageDialog(rootPane, "At "+roomTwo+"," +movie+ " is playing between "+startTimeDuplicate+ "and " + endTimeDuplicate+".");
                      }
                  }
                   else if (jCheckBox3.isSelected()&& tel) {
                    
                       if(roomDuplicate.equals(roomThree))
                      {checked= "";
                      JOptionPane.showMessageDialog(rootPane, "At "+roomThree+"," +movie+ " is playing between "+startTimeDuplicate+ "and " + endTimeDuplicate+".");
                      }
                  }
                  
                   else if (jCheckBox4.isSelected()&& tel) {
                    
                       if(roomDuplicate.equals(roomfour))
                      {checked= "";
                      JOptionPane.showMessageDialog(rootPane, "At "+roomfour+"," +movie+ " is playing between "+startTimeDuplicate+ "and " + endTimeDuplicate+".");
                      }
                  }
                  
                   else if (jCheckBox5.isSelected()&& tel) {
                     
                       if(roomDuplicate.equals(roomFive))
                      {checked= "";
                      JOptionPane.showMessageDialog(rootPane, "At "+roomFive+"," +movie+ " is playing between "+startTimeDuplicate+ "and " + endTimeDuplicate+".");
                      }
                  }
                   else{checked="false";}
                   
          
               
               }
               }
              else
              {
              checked="false";
              }
               }
                catch (SQLException ex) {
            Logger.getLogger(MovieTools.class.getName()).log(Level.SEVERE, null, ex);
        }
                
               }
              else
                    {
                        JOptionPane.showMessageDialog(rootPane, "Could not connect to database.");
                    }
               
              
              if(checked.equals("false")){
               
              try {
                  PreparedStatement pstmt = con.prepareStatement(querys);
                  
                  
                  String valuesOfCheckBox = "";
                  String valuesOfCheckBox1 ="";
                  String valuesOfCheckBox2 ="";
                  String valuesOfCheckBox3 ="";
                  String valuesOfCheckBox4 ="";
                  
                  if (A1.isSelected()) {
                      valuesOfCheckBox += A1.getText() + " ";
                  }
                  if (jCheckBox2.isSelected()) {
                      valuesOfCheckBox1 += jCheckBox2.getText() + " ";
                  }
                  if (jCheckBox3.isSelected()) {
                      valuesOfCheckBox2 += jCheckBox3.getText() + " ";
                  }
                  
                  if (jCheckBox4.isSelected()) {
                      valuesOfCheckBox3 += jCheckBox4.getText() + " ";
                  }
                  
                  if (jCheckBox5.isSelected()) {
                      valuesOfCheckBox4 += jCheckBox5.getText() + " ";
                  }
                  
                  
                  
                  String allRoom = valuesOfCheckBox+valuesOfCheckBox1+valuesOfCheckBox2+valuesOfCheckBox3+valuesOfCheckBox4;
                 
                  
                  pstmt.setString(1, MovieName.getText()+ " ");
                  pstmt.setString(2, TicketCostField1.getText());
                  pstmt.setString(3, MovieMinutesField1.getText());
                  pstmt.setString(4, StartTimeField.getText());
                  pstmt.setString(5, EndTimeField.getText());
                  pstmt.setString(6, allRoom);
                  pstmt.setString(7, MovieReps1.getText());
                  pstmt.setString(8, RestTimeField.getText());
                  no++;
                  pstmt.executeUpdate();
                  getMovieReps();
                  JOptionPane.showMessageDialog(rootPane, "Movie inserted");
                    MovieName.setText("");
                    TicketCostField1.setText("");
                    MovieMinutesField1.setText("");
                    MovieReps1.setText("");
                    RestTimeField.setText("");
                    StartTimeField.setText("");
                    EndTimeField.setText("");
                    TicketCostField1.disable();
                    MovieMinutesField1.disable();
                    MovieReps1.disable();
                    RestTimeField.disable();
                    StartTimeField.disable();
                    EndTimeField.disable();
                     A1.setSelected(false);
                      jCheckBox2.setSelected(false);
                       jCheckBox3.setSelected(false);
                        jCheckBox4.setSelected(false);
                         jCheckBox5.setSelected(false);
              }
              catch (SQLException ex)
              {
                  
                  Logger.getLogger(AdminMovies.class.getName()).log(Level.SEVERE, null, ex);
              }
              }
          
        } 
          } catch (ParseException ex) {
            Logger.getLogger(AdminMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         
         
         
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MovieNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MovieNameActionPerformed

    private void A1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A1ActionPerformed
        
    }//GEN-LAST:event_A1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
        if(MovieName.getText().trim().isEmpty())
        {
            
        JOptionPane.showMessageDialog(rootPane, "Enter movie's name first.");
        }
        
        else if(TicketCostField1.getText().trim().isEmpty() && MovieMinutesField1.getText().trim().isEmpty() && MovieReps1.getText().trim().isEmpty() && RestTimeField.getText().trim().isEmpty() )
        {
            
           TicketCostField1.enable();
           TicketCostField1.setText(" ");
           TicketCostField1.setText("");
        
        
        
           MovieMinutesField1.enable();
           MovieMinutesField1.setText(" ");
           MovieMinutesField1.setText("");
  
           MovieReps1.enable();
           MovieReps1.setText(" ");
           MovieReps1.setText("");

           RestTimeField.enable();
           RestTimeField.setText(" ");
           RestTimeField.setText("");
          

           StartTimeField.enable();
           StartTimeField.setText(" ");
           StartTimeField.setText("");
        
           EndTimeField.enable();
           EndTimeField.setText(" ");
           EndTimeField.setText("");
            
           A1.setEnabled(true);
           jCheckBox2.setEnabled(true);
           jCheckBox3.setEnabled(true);
           jCheckBox4.setEnabled(true);
           jCheckBox5.setEnabled(true);
      }
        else
        {
         
        
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Connection con;
        SqlCon movie_ret = new SqlCon();
        con = movie_ret.getConnection();
        if (con!=null)
        {
        
       MovieTools mv = new MovieTools();
       mv.setVisible(true);
        }
        else
        {
        JOptionPane.showMessageDialog(rootPane, "Unable to connect to database.");
        
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
      Connection con;
        SqlCon movie_ret = new SqlCon();
        con = movie_ret.getConnection();
        
       
        
       
        
        if (con!=null)
        {
            
             String reservationID = JOptionPane.showInputDialog("Enter reservation ID: ");
             
             if (reservationID == null)
             {
             
             }
             else{
             
             if (!reservationID.isEmpty())
             {
                 Statement s;
                 String  firstName = null;
                 String  lastName = null;
                 String  movie = null;
                 String  time = null;
        try {

                s = con.createStatement();
                ResultSet rs = s.executeQuery("Select * from usergui where ReservationID ='"+reservationID+"'");
                while(rs.next() )
                {
                  firstName =  rs.getString("FirstName");
                  lastName =  rs.getString("LastName");
                  movie =  rs.getString("Movie");
                  time =  rs.getString("Time");
                  
                }
  
            if (firstName!=null && reservationID!=null)
            {
                
                 JOptionPane.showMessageDialog(rootPane, "Reservation Found!" + "\n" + "Name: "+ firstName + "\n" + "Surname: " + lastName + "\n" + "Movie: "+ movie + "\n" + "Time: " + time);
             int input = JOptionPane.showConfirmDialog(null, "Delete reservation?"); 
             if (input ==0)
             {
                 
                 
           try 
           {
                s = con.createStatement();
            int updateCount = s.executeUpdate("Delete from usergui where ReservationID ='"+reservationID+"'");
             JOptionPane.showMessageDialog(rootPane, "Reservation Canceled");
  
            }     
              catch (SQLException ex)
              {
            Logger.getLogger(AdminMovies.class.getName()).log(Level.SEVERE, null, ex);
              }   
           
             }
             
             
            }
            else
            {
            JOptionPane.showMessageDialog(rootPane, "ID not found!");
            }
            
             
             }
        catch (SQLException ex)
        {
            Logger.getLogger(AdminMovies.class.getName()).log(Level.SEVERE, null, ex);
        }      
        }
             else
             {
             
             JOptionPane.showMessageDialog(rootPane, "Please enter ID.");
             reservationID = JOptionPane.showInputDialog("Enter reservation ID: ");
             }
             
             }
        }
        
         
        else
        {
         JOptionPane.showMessageDialog(rootPane, "Unable to connect to database.");
        }
                
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void TicketCostField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TicketCostField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TicketCostField1ActionPerformed

    private void TicketCostField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TicketCostField1KeyPressed
       
    }//GEN-LAST:event_TicketCostField1KeyPressed

    private void MovieMinutesField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieMinutesField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MovieMinutesField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMovies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AdminMovies().setVisible(true);
        });
    }

   
public boolean MovieErrorTime() throws ParseException

{
int min =Integer.parseInt(MovieMinutesField1.getText());
        String start = StartTimeField.getText();
        
                        String startWithoutSecs[] = start.split(":"); 
                        String startH = startWithoutSecs[0]; 
                        String startM = startWithoutSecs[1]; 
          String end = EndTimeField.getText();
                        String endWithoutSecs[] = end.split(":"); 
                        String endH = endWithoutSecs[0]; 
                        String endM = endWithoutSecs[1];               
                        
                        
              int startHourInt = Integer.parseInt(startH);  
              int startMinInt = Integer.parseInt(startM);
               int endHourInt = Integer.parseInt(endH);  
              int endMinInt = Integer.parseInt(endM);
              
              
             
                
                
              
                 LocalTime startTime = LocalTime.parse(StartTimeField.getText(),DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime endTime = LocalTime.parse(EndTimeField.getText(),DateTimeFormatter.ofPattern("HH:mm"));                        
              
                
                int rest = 10;
                        String restS = "00:10:00";
                        int MovMinInt =min;
                        String movMinString = MovieMinutesField1.getText();
                        String movMinStrinh24H = "00" + ":" + movMinString + ":" +"00";

                        String Dur[] = movMinStrinh24H.split(":"); 
                        String h = Dur[0]; 
                        String m = Dur[1];       
                        String sec = Dur[2];  
                        long hl = Long.parseLong(h);
                        long ml = Long.parseLong(m);
                        long sl = Long.parseLong(sec);
                        
                Duration d= Duration.ofHours(hl).plusMinutes(ml).plusSeconds(sl);
                Duration restt = Duration.ofMinutes(Integer.parseInt(RestTimeField.getText()));
                
                     
                      
                      String movieReps = MovieReps1.getText();
                      int movieRepsInt = Integer.parseInt(movieReps);
                             
                     
                         String movieSequenceString  = startTime.plus(d) +"";                 
                        
                          
                
                 
                        
                        
                        int movMin24hH = min / 60;
                        int movMin24hM = min % 60;
                        String movmin24h = "0" + movMin24hH + ":" + movMin24hM;
                         
                       
                        
                     int restOfTime = Integer.parseInt(RestTimeField.getText());
                     
                     SimpleDateFormat sequence = new SimpleDateFormat("HH:mm"); 
                     Calendar movie = Calendar.getInstance();
                     Calendar endA = Calendar.getInstance();
                     Calendar startA =Calendar.getInstance();
                    
                        startA.set(Calendar.HOUR_OF_DAY, Integer.parseInt(startH));
                        startA.set(Calendar.MINUTE,  Integer.parseInt(startM));  
                        startA.set(Calendar.DATE, 1);
                    
                     
                        
                     
                     
                     
                     
                        movie.set(Calendar.HOUR_OF_DAY, Integer.parseInt(startH));
                        movie.set(Calendar.MINUTE,  Integer.parseInt(startM));  
                        movie.set(Calendar.DATE, 1);
                        
                       
                        movie.add(Calendar.MINUTE, min);
                       
                         
                        endA.set(Calendar.HOUR_OF_DAY, Integer.parseInt(endH));
                        endA.set(Calendar.MINUTE,  Integer.parseInt(endM)); 
                        endA.set(Calendar.DATE, 1);
                        boolean a = false; 
           
                     int i=0;
                while ( i < movieRepsInt-1  )
                    
                     {
                         
                         
                         if(  endA.before(startA) )
                                 {                   
                                    endA.add(Calendar.DATE, 1);
                              
                                    }
                         
                         
                         
                         if (  movie.before(endA) )
                    
                    {
                      a = false;
                      
                    
                    movie.add(Calendar.MINUTE, restOfTime);
                    movie.add(Calendar.MINUTE, min);       
                   
                    if (  movie.after(endA) )
                    {
                     a = true;
                    break;
                    
                    
                    }
                    
                    
                     
                    }
                         
                     else
                     {
                        
                          a = true;
                    
                     break;
                     }
                         
                           i++;
                     
                     }
                
                       
                    return      a;

             
}


    public int getMovieReps()
    
    {
    
    return Integer.parseInt( MovieReps1.getText());
    
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox A1;
    private javax.swing.JFormattedTextField EndTimeField;
    private javax.swing.JFormattedTextField MovieMinutesField1;
    private java.awt.TextField MovieName;
    private javax.swing.JFormattedTextField MovieReps1;
    private javax.swing.JFormattedTextField RestTimeField;
    private javax.swing.JFormattedTextField StartTimeField;
    private javax.swing.JFormattedTextField TicketCostField1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    // End of variables declaration//GEN-END:variables
}
